{
  "quizzes": {
    "IOT321": [
      {
        "question": "What is an embedded system?",
        "options": [
          "A server running cloud apps",
          "A combination of hardware and software for a specific function",
          "A gaming console",
          "A regular laptop"
        ],
        "answer_index": 1,
        "explanation": "An embedded system is designed to perform a dedicated function within a larger mechanical or electrical system. Unlike a general-purpose computer (like a laptop), it's a specialized combination of computer hardware and software for a specific task, such as the system inside a microwave oven."
      },
      {
        "question": "Which of the following is an example of an embedded system?",
        "options": [
          "Desktop PC",
          "Microwave oven",
          "Gaming laptop",
          "Cloud server"
        ],
        "answer_index": 1,
        "explanation": "A microwave oven contains a computer system dedicated solely to controlling its functions (heating, timer, etc.). A Desktop PC, gaming laptop, and cloud server are all general-purpose computers designed to run a wide variety of applications."
      },
      {
        "question": "What distinguishes an embedded system from a general-purpose computer?",
        "options": [
          "Embedded systems are faster",
          "Embedded systems perform one task efficiently",
          "Embedded systems run multiple programs",
          "Embedded systems have higher memory"
        ],
        "answer_index": 1,
        "explanation": "The key difference is specialization. An embedded system is optimized to perform a specific task or a small set of tasks very efficiently and reliably, whereas a general-purpose computer is designed to be flexible and run many different types of software."
      },
      {
        "question": "Why are processors often used instead of custom hardware in embedded systems?",
        "options": [
          "Less flexible",
          "Cheaper and allows software updates",
          "Consumes more power",
          "Occupies more space"
        ],
        "answer_index": 1,
        "explanation": "Using a general-purpose processor is often more cost-effective for manufacturing at scale. It also provides immense flexibility, as the system's logic can be changed or updated via software without redesigning the hardware."
      },
      {
        "question": "What is a real-time system?",
        "options": [
          "A system that stores large data",
          "A system with strict timing constraints",
          "A system focused on internet speed",
          "A system with cloud backup"
        ],
        "answer_index": 1,
        "explanation": "A real-time system is a computing system where the correctness of a result depends not only on the logical result of the computation but also on the time at which the results are produced. They must meet strict deadlines."
      },
      {
        "question": "What happens if a deadline is missed in a hard real-time system?",
        "options": [
          "Slight delay",
          "Warning message",
          "Catastrophic failure",
          "Automatic reboot"
        ],
        "answer_index": 2,
        "explanation": "In a 'hard' real-time system, missing a deadline is considered a total system failure. Examples include anti-lock braking systems or airbag controllers in a car, where a delay of even milliseconds can have catastrophic consequences."
      },
      {
        "question": "What is polling in embedded systems?",
        "options": [
          "A method where CPU waits for user input",
          "A method where the processor repeatedly checks device status",
          "An algorithm for memory optimization",
          "A networking protocol"
        ],
        "answer_index": 1,
        "explanation": "Polling is a technique in which the processor continuously checks the status of a peripheral in a loop to determine if it needs service. It’s simple but inefficient, as it wastes CPU cycles."
      },
      {
        "question": "What is an interrupt in embedded systems?",
        "options": [
          "A mechanism to stop hardware permanently",
          "A signal that temporarily halts the CPU to handle a specific task",
          "A command to restart the device",
          "A loop that checks device status"
        ],
        "answer_index": 1,
        "explanation": "An interrupt is a hardware or software signal that causes the processor to temporarily stop its current task and execute an interrupt service routine (ISR). It allows efficient event-driven processing."
      },
      {
        "question": "Which memory type stores permanent firmware in embedded systems?",
        "options": [
          "RAM",
          "ROM",
          "Cache",
          "Flash buffer"
        ],
        "answer_index": 1,
        "explanation": "ROM (Read-Only Memory) stores the embedded software (firmware) that runs permanently on the device, even when it’s powered off."
      },
      {
        "question": "Why do embedded systems vary greatly in hardware design?",
        "options": [
          "To improve portability",
          "Because each system is optimized for its specific function",
          "Due to lack of standards",
          "To increase software compatibility"
        ],
        "answer_index": 1,
        "explanation": "Each embedded system is designed for a specific application. Designers remove unnecessary components to reduce cost and power consumption."
      },
      {
        "question": "What are the main input and output types in embedded systems?",
        "options": [
          "Input: sensors, Output: displays or actuators",
          "Input: hard drives, Output: printers",
          "Input: keyboards only, Output: monitors only",
          "Input: APIs, Output: databases"
        ],
        "answer_index": 0,
        "explanation": "Inputs in embedded systems include sensors, buttons, and signals, while outputs control displays, actuators, or other devices interacting with the physical world."
      },
      {
        "question": "What is the role of an RTOS in embedded software?",
        "options": [
          "It handles user interfaces",
          "It manages tasks and improves responsiveness",
          "It increases system clock speed",
          "It stores application data"
        ],
        "answer_index": 1,
        "explanation": "A Real-Time Operating System (RTOS) organizes software into tasks, ensuring that high-priority tasks execute in time and improving the overall responsiveness of the embedded system."
      },
      {
        "question": "What is MIPS a measure of?",
        "options": [
          "Power usage",
          "Processing speed",
          "Storage capacity",
          "Temperature range"
        ],
        "answer_index": 1,
        "explanation": "MIPS stands for Millions of Instructions Per Second. It measures a processor’s computational performance."
      },
      {
        "question": "Why is power consumption important in embedded systems?",
        "options": [
          "It affects display brightness",
          "It determines battery life and heat generation",
          "It controls data transmission rate",
          "It has no impact on small devices"
        ],
        "answer_index": 1,
        "explanation": "Power efficiency is critical for portable or battery-powered devices. Lower power usage means smaller batteries, less heat, and longer operation time."
      },
      {
        "question": "Why is C language preferred for embedded programming?",
        "options": [
          "Because it is object-oriented",
          "Because it provides both low-level hardware access and high-level abstraction",
          "Because it runs only on 64-bit processors",
          "Because it is easier than Assembly"
        ],
        "answer_index": 1,
        "explanation": "C offers direct hardware control with structured programming features. It produces compact and efficient code suitable for embedded systems."
      },
      {
        "question": "Which of the following languages is mainly used for safety-critical systems like aerospace?",
        "options": [
          "C",
          "Assembly",
          "Ada",
          "Forth"
        ],
        "answer_index": 2,
        "explanation": "Ada is used in safety-critical domains such as defense and aerospace due to its strong type-checking and structured design features."
      },
      {
        "question": "Why are fixed-width integers important in embedded systems?",
        "options": [
          "They make code faster",
          "They ensure consistent integer size across compilers and processors",
          "They increase clock speed",
          "They allow automatic debugging"
        ],
        "answer_index": 1,
        "explanation": "Fixed-width integers (like int8_t, int16_t) ensure that variables have predictable sizes across different architectures, improving portability and reliability."
      },
      {
        "question": "What does NRE stand for in embedded system design?",
        "options": [
          "Nonrecurring Engineering",
          "Network Resource Efficiency",
          "Normal Runtime Execution",
          "Non-Reduced Energy"
        ],
        "answer_index": 0,
        "explanation": "NRE (Nonrecurring Engineering) refers to one-time costs for designing and developing hardware and software before production begins."
      },
      {
        "question": "What is a key challenge for embedded developers when writing code?",
        "options": [
          "Handling abundant resources",
          "Working with limited memory and CPU power",
          "Accessing cloud APIs",
          "Managing multiple users"
        ],
        "answer_index": 1,
        "explanation": "Embedded developers must write efficient and compact code since embedded systems often have limited memory and processing power."
      },
      {
        "question": "What is dynamic memory fragmentation?",
        "options": [
          "Reorganizing files in ROM",
          "Uneven allocation of memory blocks leading to crashes",
          "A method for speeding up data access",
          "A type of power optimization"
        ],
        "answer_index": 1,
        "explanation": "Dynamic allocation can fragment memory over time, leaving unusable gaps and causing instability or crashes in long-running embedded systems."
      }
    ]
  }
}